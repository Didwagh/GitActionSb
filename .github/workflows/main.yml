name: Deploy Spring Boot to Pinggy
on: 
  push:
    branches: [ main, master ]
  workflow_dispatch: # Allow manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-
      
      - name: Verify project structure
        run: |
          echo "üîç Checking project structure..."
          ls -la
          echo "üìÅ Looking for pom.xml files:"
          find . -name "pom.xml" -type f
          
          if [ ! -f "pom.xml" ]; then
            echo "‚ùå No pom.xml found in root directory"
            echo "Please ensure your Spring Boot project is in the repository root"
            echo "Or modify the action to cd into the correct directory"
            exit 1
          fi
          
          echo "‚úÖ pom.xml found, checking if it's a Spring Boot project..."
          if grep -q "spring-boot" pom.xml; then
            echo "‚úÖ Spring Boot dependencies found"
          else
            echo "‚ö†Ô∏è  Warning: No Spring Boot dependencies detected in pom.xml"
          fi
      
      - name: Build with Maven
        run: |
          echo "üèóÔ∏è Building Spring Boot application..."
          mvn clean package -DskipTests -B -V
          
          echo "üì¶ Checking build output..."
          ls -la target/
          
          if ls target/*.jar 1> /dev/null 2>&1; then
            echo "‚úÖ JAR file built successfully:"
            ls -la target/*.jar
          else
            echo "‚ùå No JAR file found in target directory"
            exit 1
          fi
      
      - name: Start Spring Boot application
        run: |
          echo "üöÄ Starting Spring Boot application..."
          
          # Find the JAR file (exclude original and plain JARs)
          JAR_FILE=$(find target -name "*.jar" -not -name "*-original.jar" -not -name "*-plain.jar" | head -1)
          
          if [ -z "$JAR_FILE" ]; then
            echo "‚ùå No executable JAR found"
            exit 1
          fi
          
          echo "üì¶ Starting JAR: $JAR_FILE"
          
          # Start the application in background
          nohup java -jar "$JAR_FILE" > app.log 2>&1 &
          APP_PID=$!
          echo "üÜî Application PID: $APP_PID"
          
          # Wait for application to start
          echo "‚è≥ Waiting for application to start..."
          for i in {1..60}; do
            if curl -s http://localhost:8080/actuator/health > /dev/null 2>&1; then
              echo "‚úÖ Application health check passed"
              break
            elif curl -s http://localhost:8080 > /dev/null 2>&1; then
              echo "‚úÖ Application is responding"
              break
            else
              if [ $i -eq 60 ]; then
                echo "‚ùå Application failed to start within 60 seconds"
                echo "üìã Application logs:"
                cat app.log
                exit 1
              fi
              echo "‚è≥ Waiting... ($i/60)"
              sleep 1
            fi
          done
      
      - name: Test local endpoints
        run: |
          echo "üß™ Testing local endpoints..."
          
          # Test root endpoint
          echo "Testing http://localhost:8080/"
          curl -v http://localhost:8080/ || echo "Root endpoint not available"
          
          # Test health endpoint
          echo "Testing http://localhost:8080/actuator/health"
          curl -v http://localhost:8080/actuator/health || echo "Health endpoint not available"
          
          # Test any custom /api endpoint
          echo "Testing http://localhost:8080/api"
          curl -v http://localhost:8080/api || echo "API endpoint not available"
      
      - name: Create Pinggy tunnel
        run: |
          echo "üåê Creating Pinggy tunnel..."
          ssh -p 443 \
              -o StrictHostKeyChecking=no \
              -o ServerAliveInterval=30 \
              -R0:localhost:8080 a.pinggy.io &
          
          sleep 5
          echo "‚úÖ Tunnel created! Check logs above for public URL"
      
      - name: Keep workflow alive and monitor
        run: |
          echo "üïê Keeping workflow alive for 5 minutes..."
          echo "üîó Your Spring Boot app should be accessible via the Pinggy URL above"
          
          for i in {1..10}; do
            echo "‚è≥ $((i*30)) seconds elapsed..."
            
            # Show recent app logs
            if [ -f app.log ]; then
              echo "üìã Recent application logs:"
              tail -10 app.log
            fi
            
            # Check if app is still running
            if curl -s http://localhost:8080/actuator/health > /dev/null 2>&1; then
              echo "‚úÖ App still healthy"
            else
              echo "‚ö†Ô∏è App health check failed"
            fi
            
            sleep 30
          done
          
          echo "‚úÖ Workflow completed"
