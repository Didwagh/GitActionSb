name: Deploy Spring Boot Gradle to Pinggy
on: 
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      
      - name: Verify project structure
        run: |
          echo "üîç Checking project structure..."
          ls -la
          echo "üìÅ Looking for build.gradle files:"
          find . -name "build.gradle" -type f
          
          if [ ! -f "build.gradle" ]; then
            echo "‚ùå No build.gradle found in root directory"
            exit 1
          fi
          
          echo "‚úÖ build.gradle found"
          find src -type f -name "*.java" | head -10
          
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      
      - name: Build with Gradle
        run: |
          echo "üèóÔ∏è Building Spring Boot application..."
          ./gradlew clean build -x test --no-daemon
          ls -la build/libs/
          if ! ls build/libs/*.jar 1> /dev/null 2>&1; then
            echo "‚ùå No JAR file found"
            exit 1
          fi
      
      - name: Start Spring Boot application
        run: |
          echo "üöÄ Starting Spring Boot application..."
          JAR_FILE=$(find build/libs -name "*.jar" -not -name "*-plain.jar" | head -1)
          if [ -z "$JAR_FILE" ]; then
            echo "‚ùå No executable JAR found"
            ls -la build/libs/
            exit 1
          fi
          echo "üì¶ Starting JAR: $JAR_FILE"
          nohup java -jar "$JAR_FILE" > app.log 2>&1 &
          APP_PID=$!
          echo $APP_PID > app.pid
          echo "üÜî App PID: $APP_PID"
          # wait for app
          for i in {1..60}; do
            if curl -s http://localhost:8080/actuator/health > /dev/null 2>&1 || curl -s http://localhost:8080 > /dev/null 2>&1; then
              echo "‚úÖ App responding"
              break
            fi
            if [ $i -eq 60 ]; then
              echo "‚ùå App didn't start"
              cat app.log || true
              exit 1
            fi
            sleep 1
          done

      - name: Test local endpoints
        run: |
          echo "üß™ Testing local endpoints..."
          curl -v http://localhost:8080/ || true
          curl -v http://localhost:8080/actuator/health || true
          curl -v http://localhost:8080/api || true
          tail -n 200 app.log || true

      - name: Create Pinggy tunnel (with CORS headers)
        id: pinggy
        run: |
          set -e
          echo "üåê Creating Pinggy tunnel (backgrounded, logging to pinggy.log)..."

          nohup ssh -p 443 \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -o ServerAliveInterval=30 \
            -t -R 0:127.0.0.1:8080 a.pinggy.io \
            'u:Access-Control-Allow-Origin:http://127.0.0.1:5500' \
            'u:Access-Control-Allow-Methods:GET,POST,PUT,PATCH,DELETE,OPTIONS' \
            'u:Access-Control-Allow-Headers:Content-Type,Authorization,X-Requested-With,Accept,Origin' \
            'a:Access-Control-Max-Age:86400' \
            > pinggy.log 2>&1 &

          echo $! > pinggy.pid
          sleep 5

          echo "---- pinggy.log (tail) ----"
          tail -n +1 pinggy.log | sed -n '1,200p' || true

          # Try to auto-detect an HTTPS/Pinggy URL in the log
          PINGGY_URL=$(grep -Eo 'https?://[^ ]*pinggy[^ ]*' pinggy.log | head -1 || true)

          if [ -n "$PINGGY_URL" ]; then
            echo "‚úÖ Detected Pinggy public URL: $PINGGY_URL"
            echo "pinggy_url=$PINGGY_URL" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è Could not auto-detect Pinggy URL. Check pinggy.log for details."
          fi

      - name: Keep workflow alive and monitor
        run: |
          echo "üïê Keeping workflow alive for 10 minutes..."
          for i in {1..20}; do
            echo "‚è≥ $((i*30)) seconds elapsed..."
            if [ -f app.log ]; then tail -5 app.log; fi
            if [ -f pinggy.log ]; then tail -5 pinggy.log; fi
            if [ -f app.pid ]; then
              APP_PID=$(cat app.pid)
              if ps -p $APP_PID >/dev/null 2>&1; then echo "‚úÖ App running (PID $APP_PID)"; else echo "‚ö†Ô∏è App not running"; fi
            fi
            sleep 30
          done
          echo "‚úÖ Workflow completed"
